entity Producer {
    name String, 
    mail String,
    phoneNumber String,
    nib String,
    nif Integer,
    birthday LocalDate,
    adress String,
    photo String,
    linkSocial String,
    numberRequests Integer,
    payedValue Double,
    valueToPay Double,
    ranking Double
}

entity Request {
    productValue Double,
    productName String,
    source String,
    destination String,
    destinationContact String,
    initDate Instant,
    expirationDate Instant,
    description String,
    specialCharacteristics String,
    productWeight Double,
    status Status,
    estimatedDate Instant,
    deliveryTime Instant, 
    shippingCosts Double,
    rating Double
}

enum Status {
    WAITING,
    OPENED,
    OPENING,
    COMPLETING,
    COMPLETED,
    REFUSING,
    REFUSED,
    PENDING,
    CLOSING,
    CLOSED,
    IN_PROGRESS,
    PROCESSING,
    PROCESSED,
    PRE_PROCESSING,
    PRE_PROCESSED,
    LOSTED,
    CHECKING,
    CHECKED,
    CANCELED,
    CANCELING,
    DENIED,
    FAIL,
    INCOMPLET,
    PENDING,
    SHIPPED,
    IN_TRANSIT
}

entity RidePath {
    source String,
    destination String,
    distance String,
    estimatedTime String
}

entity DeliveryMan {
    name String,
    email String,
    phoneNumber String,
    nif Integer,
    nib String,
    birthday LocalDate,
    address String,
    photo String,
    openingTime String,
    numberOfDeliveries Integer,
    numberOfKm Double,
    receivedValue Double,
    valueToReceive Double,
    ranking Double
}

entity Transporter {
    name String,
    email String,
    phoneNumber String,
    nib String,
    nif Integer,
    birthday LocalDate,
    address String,
    photo String,
    favouriteTransport String,
    numberOfDeliveries Integer,
    numberOfKm Double,
    receivedValue Double,
    valueToReceive Double,
    ranking Double
}

entity Point {
    name String,
    email String,
    phoneNumber String,
    nib String,
    nif Integer,
    address String,
    openingTime String,
    numberOfDeliveries Integer,
    receivedValue Double,
    valueToReceive Double,
    ranking Double
}

entity Dimensions {
    height Double,
    width Double,
    depth Double
}

entity Zone {
    name String
}

relationship OneToMany {
	Point to DeliveryMan{point required},
    RidePath to Request{ridePath required},
    Producer to Request{producer required},
    Zone to Point{zone}
}

relationship OneToOne {
	Request to Dimensions
}

relationship ManyToMany {
	Transporter{ridePath} to RidePath{transports}
    Zone{transporters} to Transporter{zones}
}

service * with serviceImpl
dto * with mapstruct
paginate * with pagination
filter all
